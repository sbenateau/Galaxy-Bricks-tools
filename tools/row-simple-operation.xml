<tool id="row-simple-operation" name="Operations sur des lignes">
    <requirements>
        <requirement type="package" version="1.12.2">r-data.table</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        cat '$script' &&
        Rscript '$script'
    ]]></command>
    <configfiles>
        <configfile name="script"><![CDATA[
            ## Setup R error handling to go to stderr
            options(show.error.messages=F, error=function(){cat(geterrmessage(), file=stderr()); q("no",1,F)})

            ## Unify locale settings
            loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

            ## Import library
            library(data.table)

            ## Import file
            input <- fread('$input')

            ## prepare output file
            output <- input[ , c($advanced.keep)]

            ##Keep the selected columns
            inputSelect <- input[ , c($advanced.include)]

            ## Add new column
            #for $i, $s in enumerate($operation)
            rank_of_series=$i

            #if $s.outputOperation == "mean"
                result <- rowMeans(inputSelect, na.rm = TRUE)
            #elif $s.outputOperation == "sum"
                result <- rowSums(inputSelect, na.rm = TRUE)
            #elif $s.outputOperation == "sd"
                result <- rowSds(inputSelect, na.rm = TRUE)
            #elif $s.outputOperation == "countAbove0"
                inputSelectZero <- inputSelect
                inputSelectZero[inputSelectZero > 0] <- 1
                result <- rowSums(inputSelectZero, na.rm = TRUE)
            #end if

            #if $addToData == "TRUE"
                output <- data.frame(output, res = result)
                colnames(output)[ncol(output)] <- '$s.outputName'
            #else
                output <- data.frame(res = result)
                colnames(output) <- '$s.outputName'
            #end if
            #end for

            write.table(output, file="result", row.names=FALSE, sep=",")

        ]]></configfile>
    </configfiles>

    <inputs>
        <param format="tabular,csv,txt" name="input" type="data" label="Données d'entrée" />
        <param falsevalue="FALSE" label="Ajouter une colonne au jeu de données initial" name="addToData" truevalue="TRUE" type="boolean" />
        <section name="advanced" title="Options avancées" expanded="false">
        <param name="include" label="Colonnes à utiliser pour le calcul" type="data_column" data_ref="input" numerical="false" multiple = "true" />
        <param name="keep" label="Colonnes à garder dans le jeu de donnée final" type="data_column" data_ref="input" numerical="false" multiple = "true" help="Sélectionner ajouter une colonne au jeu de donnée pour pouvoir utiliser ce paramètre" />
        </section>
        <repeat name="operation" title="Opération">
            <param name="outputName" type="text" value="Result" label="Nom de la colonne de résultat" />
            <param name="outputOperation" type="select" label="Opération à réaliser">
                <option value="sum" selected="true">Somme</option>
                <option value="mean">Moyenne</option>
                <option value="sd">Ecart-type</option>
                <option value="countAbove0">Compter les valeurs supérieures à zéro</option>
            </param>
        </repeat>
    </inputs>
    <outputs>
        <data format="csv" name="output" from_work_dir="result"/>
    </outputs>
    <tests>
        <test>
            <param name="input" value="input-lubridate.tabular"/>
            <param name="addToData" value="TRUE"/>
            <param name="column" value="3"/>
            <param name="outputName" value="date"/>
            <param name="inputDateFormat" value="DMY"/>
            <param name="outputDateFormat" value="full"/>
            <output name="output" file="out-lubridate.tabular"/>
        </test>
    </tests>
    <help><![CDATA[

.. class:: infomark

Cet outil créé une nouvelle colonne qui est le résultat d'un calcul portant sur la ligne.

    ]]></help>
</tool>
